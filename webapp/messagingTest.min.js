!function(e){function n(s){if(t[s])return t[s].exports;var r=t[s]={exports:{},id:s,loaded:!1};return e[s].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}([function(module,exports,__webpack_require__){eval('\'use strict\';\n\nvar $ = __webpack_require__(1);\nvar Timer = __webpack_require__(2).Timer;\n\n/**\r\n * Test simple one-time request.\r\n */\nfunction testRequest() {\n    $("#requestResult").text("running...");\n\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n        var timer = new Timer();\n        timer.start();\n        var tab = tabs[0];\n        console.group("testRequest (One-time message check)");\n        console.log("Sending message to tab %d", tab.id);\n        console.groupEnd();\n\n        chrome.tabs.sendMessage(tab.id, { counter: 1 }, function handler(response) {\n            if (response.counter < 1000) {\n                chrome.tabs.sendMessage(tab.id, { counter: response.counter }, handler);\n            } else {\n                timer.stop();\n                var misec = Math.round(timer.milliseconds() / response.counter * 100) / 100;\n                $("#requestResult").text(misec + " ms / request");\n            }\n        });\n    });\n}\n\n/**\r\n * Test long-lived connection messages.\r\n */\nfunction testConnect() {\n    $("#connectResult").text("running...");\n\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n        var timer = new Timer();\n        timer.start();\n\n        var port = chrome.tabs.connect(tabs[0].id);\n        console.group("testRequest (Long-lived connection message check)");\n        console.log("Connected to port %O and sending message to it", port);\n        port.postMessage({ counter: 1 });\n        console.groupEnd();\n        port.onMessage.addListener(function getResp(response) {\n            if (response.counter < 1000) {\n                port.postMessage({ counter: response.counter });\n            } else {\n                timer.stop();\n                var misec = Math.round(timer.milliseconds() / response.counter * 100) / 100;\n                $("#connectResult").text(misec + " ms / message");\n            }\n        });\n    });\n}\n\n$(function () {\n    $(\'#requestButton\').click(testRequest);\n    $(\'#connectButton\').click(testConnect);\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./messagingTest.js\n// module id = 0\n// module chunks = 0\n//# sourceURL=webpack:///./messagingTest.js?')},function(module,exports){eval('module.exports = $;\n\n//////////////////\n// WEBPACK FOOTER\n// external "$"\n// module id = 1\n// module chunks = 0 2\n//# sourceURL=webpack:///external_%22$%22?')},function(module,exports){eval('"use strict";\n\nfunction Timer() {\n    this._timer = 0;\n}\n\nTimer.prototype.start = function () {\n    this._timer = performance.now();\n};\n\nTimer.prototype.stop = function () {\n    this._timer = performance.now() - this._timer;\n};\n\nTimer.prototype.reset = function () {\n    this._timer = 0;\n};\n\nTimer.prototype.milliseconds = function () {\n    return this._timer.toFixed(3);\n};\n\nexports.Timer = Timer;\n\n//////////////////\n// WEBPACK FOOTER\n// ./timer.js\n// module id = 2\n// module chunks = 0\n//# sourceURL=webpack:///./timer.js?')}]);